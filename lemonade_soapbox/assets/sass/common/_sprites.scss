/**
 * _sprites.scss
 *
 * Mixins and functions that allow us to apply a SVG sprite icon.
 * Largely cribbed from https://github.com/liquidlight/sass-gulp-svg-sprite
 */

// Import icon map
@import "icon-map";

/// Set the `$sprite` map
/// @group sprite
$sprite: map-get($icons, sprite) !default;

@mixin sprite-image($colour) {
    background-image: url("/assets/images/icons/sprite--#{str-slice('' + $colour, 2)}.svg");
}

/// Retrive an attributes value for a specific icon in the sprite map
/// @param {string} $icon - The name of the icon
/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)
@function sprite-attr($icon, $attr) {
    $newIcon: map-get($icons, $icon);
    @if $newIcon == null {
        @warn "Can't find an icon with the name #{$icon}";
    }
    @return map-get($newIcon, $attr);
}


/// Create a map with the specified icon of attributes
/// @param {string} $icon - The name of the icon
@function icon-attr($icon) {
    $attr: (
        width: sprite-attr($icon, width),
        height: sprite-attr($icon, height),
        x: sprite-attr($icon, backgroundX),
        y: sprite-attr($icon, backgroundY)
    );

    @return $attr;
}


/// Get the width of an icon in em
/// @param {string} $icon - The name of the icon
@function icon_width($icon) {
    @return mq-px2em(sprite-attr($icon, width));
}

/// Get the height of an icon in em
/// @param {string} $icon - The name of the icon
@function icon_height($icon) {
    @return mq-px2em(sprite-attr($icon, height));
}

/// Assign the correct SVG background image and dimensions to the element
%sprite {
    display: inline-block;
    background-size: mq-px2em(map-get($sprite, width)) mq-px2em(map-get($sprite, height));
}


/// Add an SVG sprite icon using em positioning
/// @param {string} $icon - The name of the icon
/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).
/// - `all` ensures the icon has the background, position and size.
/// - `size` is just for dimensions
/// - `bg` just  applies the backgrounds to an element
/// @example scss - Usage
/// .class {
///     @include sprite(arrow);
///     &:hover {
///         @include sprite(arrowDown, bg)
///     }
/// }
///
/// @example css - Output
/// .class {
///     display: inline-block;
///     background-image: url("../img/sprite.svg");
///     background-size: 34.25em 32.1875em;
/// }
///
///
/// .class {
///     width: 1.3125em;
///     height: 1.3125em;
///     background-position: -0.3125em -0.3125em;
/// }
/// .class:hover {
///     background-position: -2.25em -2.25em;
/// }
///
/// 1.  So, apparently, ceiling all the em values makes my map work.
///
@mixin sprite($icon, $type: all, $colour: #000000) {
    @if $type == all {
        // Shares the backgrounds
        @extend %sprite;
    }

    @if $type == all or $type == colour {
        @include sprite-image($colour);
    }

    $iconMap: icon-attr($icon);

    // Outputs dimensions in em
    @if $type == all or $type == size {
        width: mq-px2em(map-get($iconMap, width) + 1);
        height: mq-px2em(map-get($iconMap, height) + 1);
    }

    // Outputs background position in em
    @if $type == all or $type == bg {
        background-position: ceil(mq-px2em(map-get($iconMap, x) - 5px)) ceil(mq-px2em(map-get($iconMap, y) - 5px)); // [1]
    }
}
