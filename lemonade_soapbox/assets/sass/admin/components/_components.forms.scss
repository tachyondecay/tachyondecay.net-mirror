/* ==========================================================================
   # Specialized form inputs
   ========================================================================== */


/* Checkbox toggle */
@mixin can-toggle-branding(
  $can-toggle-off-color: #777, 
  $can-toggle-on-color: #5fc054,
  $can-toggle-inactive-text: rgba(white, 0.5),
  $can-toggle-transition: cubic-bezier(0,1,0.5,1)
) {
  
  input[type="checkbox"] {
    
    &[disabled] ~ label {
      color: rgba($can-toggle-off-color, 0.5);
    }
    
    &:focus ~ label, &:hover ~ label {
      .c-checkbox-toggle__switch {
        background-color: $can-toggle-off-color;
        &:after { color: darken($can-toggle-off-color, 10%); }
      }
    }
    &:checked {
      ~ label {
        
        .c-checkbox-toggle__switch {
          background-color: lighten($can-toggle-on-color, 5%);
          &:after { color: darken($can-toggle-on-color, 5%); }
        }
      }
      
      &:focus, &:hover {
        ~ label {
          .c-checkbox-toggle__switch {
            background-color: $can-toggle-on-color;
            &:after { color: darken($can-toggle-on-color, 10%); }
          }
        } 
      }
    }
  }
  
  label {    
    .c-checkbox-toggle__switch {
      transition: background-color 0.3s $can-toggle-transition;
      background: lighten($can-toggle-off-color, 5%);
      &:before { color: $can-toggle-inactive-text; }
      &:after {
        // Autoprefixer choked here, so making the prefixes explicit
        -webkit-transition: -webkit-transform 0.3s $can-toggle-transition;
        transition: transform 0.3s $can-toggle-transition;
        color: $can-toggle-off-color; 
      }
    }
    
  }
}

@mixin can-toggle-appearance 
( 
  $can-toggle-width: 75px,
  $can-toggle-height: 24px,
  $can-toggle-border-radius: 4px,
  $can-toggle-offset: 2px,
  $can-toggle-label-font-size: 16px,
  $can-toggle-switch-font-size: 10px,
  $can-toggle-shadow: 0 3px 3px rgba(black, 0.4)
){
  $can-toggle-switch-width: $can-toggle-width/2;
  
  input[type="checkbox"] {

    &:focus ~ label, &:hover ~ label {
      .c-checkbox-toggle__switch {
        &:after { box-shadow: $can-toggle-shadow; } 
      }
    }
    
    &:checked {
      ~ label {
        .c-checkbox-toggle__switch {
          &:after { transform: translate3d($can-toggle-width - ($can-toggle-switch-width + $can-toggle-offset),0,0); }  
        }
      }
      &:focus, &:hover {
        ~ label {
          .c-checkbox-toggle__switch { &:after { box-shadow: $can-toggle-shadow; } }
        } 
      }
    }
  }
  
  label {
    font-size: $can-toggle-label-font-size;
    
    .c-checkbox-toggle__switch {
      height: $can-toggle-height;
      flex: 0 0 $can-toggle-width;
      border-radius: $can-toggle-border-radius;
      
      &:before {
        left: $can-toggle-width/2;
        font-size: $can-toggle-switch-font-size; 
        line-height: $can-toggle-height;
        width: $can-toggle-width/2;
        padding: 0 12px;
      }
      
      &:after {
        top: $can-toggle-offset; left: $can-toggle-offset;
        border-radius: $can-toggle-border-radius/2;
        width: $can-toggle-switch-width - $can-toggle-offset; 
        line-height: $can-toggle-height - ($can-toggle-offset*2);
        font-size: $can-toggle-switch-font-size;
      }
      
      &:hover {
        &:after { box-shadow: $can-toggle-shadow; }
      }
    } 
  }
}



.c-checkbox-toggle {
  position: relative;
  display: flex;
  *, *:before, *:after { box-sizing: border-box; }
  //overflow: hidden;
  
  input[type="checkbox"] {
    opacity: 0;
    position: absolute;
    top: 0; left: 0;
    
    &[disabled] ~ label {
      pointer-events: none;
      .c-checkbox-toggle__switch { opacity: 0.4; }
    }
    
    &:checked {
      ~ label {
        
        .c-checkbox-toggle__switch {
          
          &:before {
            content: attr(data-unchecked);
            left: 0;
          }
        
          &:after {
            content: attr(data-checked);
          }  
        }
      }
      
      &:focus, &:hover {
        ~ label {
        } 
      }
    }
  }
  
  label {
    flex: 1;
    user-select: none;
    position: relative;
    display: flex;
    align-items: center;
    
    .c-checkbox-toggle__label-text { 
      flex: 0 auto;
      order: -1;
      margin-right: $unit-small;
    }
    
    .c-checkbox-toggle__switch {
      position: relative;
      
      &:before {
        content: attr(data-checked);
        position: absolute;
        top: 0;
        text-transform: uppercase;
        text-align: center;
      }
      
      &:after {
        content: attr(data-unchecked);
        position: absolute;
        z-index: 5;
        text-transform: uppercase;
        text-align: center;
        background: white;
        transform: translate3d(0,0,0);
      }

    }
    
  }

  @include can-toggle-appearance;
    @include can-toggle-branding
    (
      $grey--dark,  // Off state color
      $blue,  // On state color
      rgba(white, 0.6),  // Off state text color
      ease-in-out  // Transition timing function
    );   
}


/*
 * Star rating input 
 */
.c-rating-input {
    display: flex;
    flex-flow: row-reverse;
    justify-content: flex-end;

    input { @include inuit-hidden-visually(); }

    label:not(:last-child) {
        @include sprite('star-empty');
        margin-top: $unit-small;
        margin-right: $unit-tiny;
        width: 1em;

        cursor: pointer;
        @include inuit-font-size(24px);
    }

    label:last-child {
        align-self: last baseline;
        margin-left: $unit-small;
        order: -1;

        cursor: pointer;
        color: $blue;

        &:hover {
            color: $purple;
            transition: $global-transition;
        }
    }

    input:checked ~ label:not(:last-child),
    &:not(:checked) label:not(:last-child):hover,
    &:not(:checked) label:not(:last-child):hover ~ label:not(:last-child) {
        @include sprite('star-full');
        width: 1em;
    }
}
